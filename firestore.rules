rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function getNewsletterUserRole(newsletter, uid) {
      return get(/databases/$(database)/documents/newsletter-roles/$(newsletter)/user-role/$(uid)).data.role;
    }
    
    function getRole(newsletter) {
      return getNewsletterUserRole(newsletter, request.auth.uid);
    }

    function isOneOfRoles(newsletter, array) {
      return isSignedIn() && (getRole(newsletter) in array);
    }

    function isOwner(newsletter) {
      return isOneOfRoles(newsletter, ['owner']);
    }

    function isNull(value) {
      return value == null;
    }

    function isNumber(value) {
      return isNull(value) || value is number;
    }

    match /{path=**}/user-role/{uid} {
      function isCurrentUser() {
        return resource.data.uid == request.auth.uid;
      }

      allow read: if isCurrentUser() || isOneOfRoles(resource.data.newsletterId, ['owner']);
    }

    match /newsletter-roles/{newsletterId}/user-role/{uid} {
      function isValidProperties() {
        return 'uid' in request.resource.data
            && 'newsletter' in request.resource.data
            && 'newsletterId' in request.resource.data
            && 'email' in request.resource.data
            && 'role' in request.resource.data;
      }

      function isValidNewOwner() {
        return resource == null
          && isValidProperties()
          && request.resource.data.role == 'owner';
      }

      function isCreatedByOwner() {
        return isOwner(newsletterId)
            && isValidProperties()
      }

      function requestNotChangeOwner() {
        return request.resource.data.role != 'owner';
      }

      allow write: if isValidNewOwner() || isCreatedByOwner();
      allow delete: if isOwner(newsletterId);
    }

    match /newsletter-settings/{newsletter} {

      function notChange(field) {
        return request.resource.data[field] == resource.data[field];
      }

      function requestNotChangeInternalFields() {
        return notChange('usedDailyLimit')
            && notChange('remainingDailyLimit');
      }

      function isValid() {
        return isNumber(request.resource.data.dailyLimit)
      }

      allow create: if isValid() && isOneOfRoles(newsletter, ['owner']);
      allow read: if isOneOfRoles(newsletter, ['owner', 'admin']);
      allow update: if isValid() && requestNotChangeInternalFields() && isOneOfRoles(newsletter, ['owner', 'admin']);
      allow delete: if isOneOfRoles(newsletter, ['owner']);
    }

    match /newsletters/{newsletter} {

      function isValidNewNewsletter() {
        return resource == null
          && getNewsletterUserRole(newsletter, request.auth.uid) == 'owner';
      }

      allow create: if isValidNewNewsletter();
      allow read: if isOneOfRoles(newsletter, ['owner', 'admin', 'member']);
      allow update: if isOneOfRoles(newsletter, ['owner', 'admin']);
      allow delete: if isOneOfRoles(newsletter, ['owner']);

      match /subscribers/{subscriber} {
        allow write, read: if isOneOfRoles(newsletter, ['owner', 'admin']);
      }

      match /subscribers-internal/{subscriber} {
        allow read, write: if false
      }

      match /messages/{message} {
        function isValidNewMessage() {
          return resource == null
            && request.resource.data.author == request.auth.uid;
        }

        function isAutor() {
          return resource.data.author == request.auth.uid;
        }

        allow write: if isValidNewMessage()
                     || isAutor()
                     || isOneOfRoles(newsletter, ['owner', 'admin']);
        allow read: if isOneOfRoles(newsletter, ['owner', 'admin', 'member'])
      }

      match /delivery/{delivery} {
        function isValidNewDelivery() {
          return resource == null
              && 'newsletterId' in request.resource.data
              && 'message' in request.resource.data
              && 'status' in request.resource.data
              && 'canceled' in request.resource.data
              && 'createdAt' in request.resource.data;
        }

        allow create: if isValidNewDelivery() && isOneOfRoles(newsletter, ['owner', 'admin'])
        allow read: if isOneOfRoles(newsletter, ['owner', 'admin'])
      }

    }

    match /newsletter-invitations/{uuid} {
      allow read: if isOneOfRoles(resource.data.newsletterId, ['owner']);
      allow write: if isOneOfRoles(resource.data.newsletterId, ['owner'])
    }
  }
}